#+TITLE:Dot Net 학습시 메모사항
#+OPTIONS: ^:{}

* string 키워드

   System.String 의 alias 에 불과하다. 유니코드 캐릭터 집합이고, @""
   문자열을 쓰면 이스케이프 특수문자를 그대로 입력받을 수 있단다.
   그리고, 중요한 사실은 *immutable(변경불가)* 타입이다.

* System.Object 와 System.ValueType, 그리고, System.Enum

   .net 에서는 모든 타입이 암묵적으로 이 두가지로 부터 파생된다(사실
   =System.ValueType= 은 =System.Object= 의 파생클래스이며
   =System.Enum= 의 부모클래스이다). 
   ValueType(/value type/)인 경우  =System.ValueType= 로 부터 암묵적 상속을
   받으며, RefType(/reference type/) 인 경우 =System.Object= 로 부터
   파생된다. *암묵적*이라는 말에 유념. 명시적으로 상속받도록 코딩할 수
   없다(/sealed/ 클래스임).

* Boxing 과 Unboxing

   모든 타입은 System.Object(즉 =object=)형에 담을 수 있는데, 이게 바로
   boxing. boxing 은 암시적이어서 명시적으로 =(System.Object)intValue=
   이런식으로 하지 않아도 된다.

   #+begin_src csharp
     // 실제로 존재하지 않는 개념적 클래스 sealed class Box<T>:
     System.ValueType<Type T>
     {
         T value;
         public Box(T t)
         {
             value = t;
         }
     }
     
     // 아래와 같이 하면.
     int i = 123;
     object box = i; // boxing!
     
     // 실제로는 다음과 같이 되는 개념이 boxing
     int i = 123;
     object box = new Box<int>(i); // boxing!
   #+end_src

   unboxing은 위의 반대. unboxing 은 object에 저장된 걸 다시 원래대로
   복구하는것. 값객체의 경우, boxing/unboxing시 값의 복제가 이루어지게
   되므로, 시간이 걸린다. c++에서
   std::vector<VeryLargeSizeOfStructure> 같은 것이 그런 예가 될 수
   있겠다. 아래는 [[http://msdn.microsoft.com/ko-kr/library/ms173196.aspx][MSDN에서 찾은 글]]이다.

   #+begin_example
    System.Collections.ArrayList 같은 제네릭이 아닌 컬렉션 클래스의
    예와 같이 많은 수의 boxing이 필요한 경우에는 값 형식을 사용하지
    않는 것이 좋습니다. System.Collections.Generic.List<T> 같은 제네릭
    컬렉션을 사용하면 값 형식의 boxing을 방지할 수 있습니다. boxing 및
    unboxing 과정에는 많은 처리 작업이 필요합니다. 값 형식을 boxing할
    때는 완전히 새로운 개체가 만들어져야 하며, 이러한 작업은 간단한
    참조 할당보다 최대 20배의 시간이 걸립니다. unboxing을 할 때는
    캐스팅 과정에 할당 작업보다 4배의 시간이 걸릴 수 있습니다. 자세한
    내용은 Boxing 및 Unboxing을 참조하십시오.
   #+end_example

* 빈 소멸자는 피하라.
   객체가 파괴될 때, 소멸자들이 Finalize큐에 들어가서 자식->부모 순서대로(상속을
   고려하여) 호출된다. 소멸자가 없으면 아예 호출이 일어나지 않으므로
   성능이 향상될 수 있단다. 

* partial class

   멋지다. patial class는 아래의 예를 보면 한번에 느낌이 온다. 어떤
   함수를 partial 로 선언하면, 구현을 포함하지 않을때는 아예 호출하는
   코드 자체가 없어진다고 한다. 그러다 구현을 포함한 추가 partial
   class를 따로 정의하면 그때 partial로 정의한 함수의 호출루틴이 다시
   살아난다.

   #+begin_src csharp
     partial class Customer
     {
         string name;
         public string Name
         {
             get
             {
                 return name;
             }
             set
             {
                 OnNameChanging(value);
                 name = value;
                 OnNameChanged();
             }
         }
         public override string ToString()
         {
             Console.WriteLine("tostring is called.");
             return string.Format("고객:이름={0}", name);
         }
         partial void OnNameChanging(string name);
         partial void OnNameChanged();
     }
     
     partial class Customer
     {
         partial void OnNameChanging(string name)
         {
             Console.WriteLine("OnNameChanging({0})", name);
         }
         partial void OnNameChanged()
         {
             Console.WriteLine("OnNameChanged()");
         }
     }
     
     class PartialClassTest
     {
         static void Main()
         {
             Console.WriteLine("Partial 클래스 테스트...");
             Customer customer = new Customer();
             customer.Name = "이준환";
             // Console.WriteLine("객체 정보 : {0}", customer);
         }
     }
     
   #+end_src

   위 코드의 실행결과는

   #+begin_example
     Partial 클래스 테스트...
     OnNameChanging(이준환)
     OnNameChanged()
   #+end_example

* 가비지콜렉션을 제어. IDisposable과 using 구문

   using 키워드는 원래 네임스페이스의 사용을 선언하는 키워드. 하지만
   구문내에서는 특정 객체를 생성하고 사용이 끝나면 파괴하는 일을
   깔끔하게 해주는 용도로 사용됨.

   #+begin_src csharp
     using (Font font1 = new Font("Arial", 10.0f))
     {
         byte charset = font1.GdiCharSet;
     }
   #+end_src

   위 구문은 아래의 구문으로 컴파일된다 함. 

   #+begin_src csharp
     {
         Font font1 = new Font("Arial", 10.0f);
         try
         {
             byte charset = font1.GdiCharSet;
         }
         finally
         {
             if (font1 != null)
                 ((IDisposable)font1).Dispose();
         }
     }
   #+end_src

   using에는 여러개의 객체할당 구문을 콤마로 해서 넣을 수 있다.

   #+begin_src csharp
     using (Font font3 = new Font("Arial", 10.0f), 
            font4 = new Font("Arial", 10.0f))
     {
         // Use font3 and font4.
     }
   #+end_src

   다만 다음과 같이 using 구문 바깥쪽에서 선언/정의된 객체의 사용은
   바람직하지 않다(using {} 구문을 벗어나면 할당해제되기
   때문이기도...

   #+begin_src csharp
     Font font2 = new Font("Arial", 10.0f);
     using (font2) // not recommended
     {
         // use font2
     }
     // font2 is still in scope
     // but the method call throws an exception
     float f = font2.GetHeight(); 
   #+end_src

* 숫자 리터럴의 suffix들
   [[http://www.dotnetperls.com/suffix][여기]] 에 정리가 잘됨.

   - m 또는 M : =decimal myMoney = 300.5m;=
   - f 또는 F : =float f1 = 100.50F;=
   - u 또는 U : =uint u1 = 1000u;=
   - ul 또는 UL : =ulong u2 = 1000200300400500ul;=
   - l 또는 L : =long x = 1000L;= 
	 
	 가급적이면 대문자를 쓰는게 덜 헛갈릴 수 있다(ex: l vs L ==> l 은
     숫자 1과 비슷해 보인다).

* C# 에서 {void|int} Main([string[] args])

   C# 에서는

    - public static void Main();
	- public static void Main(string[] args);
	- public static int Main();
	- public static int Main(string[] args);

   의 Entry Point 사용이 가능하다. C/C++ 과 다른 점은,

   - Shell Pattern 확장이 자동이 아님.
   - 프로그래명이 =args[0]= 가 아님. =arg[0]= 은 첫번째 argument 임.
   - int argc 는 필요없음. args.Length 하면 얻을 수 있음.

* @ 스트링 리터럴 : 이스케이프 문자가 없는 문자열.
   ="c:\\my\\temp\\dir"= 보다는 =@"c:\my\temp\dir"= 이 읽기 편하다.
   @스트링 리터럴이 가지는 유일한 특수처리 문자는 따옴표 그
   자체다(이를 포함하려면 연속으로 따옴표 2개를 입력)
* Directory/File/Environment 클래스의 클래스 정적 메소드들
   - File.Exists(filePath) / Directory.Exists(dirName)
   - File.Delete(filePath)
   - Directory.CreateDirectory(dirPath)
   - Environment.GetLogicalDrives()
   - Environment.CurrentDirectory()
   - Environment.CommandLine()

* C# String Format

   - Excel에서 보았던 형식이 가능하다.
	 
	 String.Format("{0:0000.00}", 142.1340); --> 0142.13

   - C에서 온 numeric
	 
	 String.Format("{0:f2}", 142.1340); --> 142.13

* string s = new string("hello") 같은 구문은 C# 에서 안된다?!
   생성자에는 있는데????
* 상수, 식도 객체처럼.
   와 Ruby 같다.
   #+begin_src csharp
     Console.WriteLine("10 's type is {0}", 10.GetType());
     Console.WriteLine("10 + 8 = {0}", (10+8).ToString());
   #+end_src

* interface 의 멤버 메소드에 virtual은 불필요. 파생클래스에서 override 불필요.
* interface 에서 속성정의 가능
   다음과 같이 속성도 interface 에 정의가능(아래 예에서는 인덱서
   메소드를 정의함).

   #+begin_src csharp
     public interface IStringContainer
     {
         string this[int index]
         {
             get; set;
         }
     }
     
     public class SomeClass : IStringContainer
     {
         // ...
         public string this[int index]
         {
             get
             {
                 return myStrings[index];
             }
             set
             {
                 myStrings.Insert(index, value);
             }
         }
     }
   #+end_src
   
* struct 에서 인자가 있는 생성자는 반드시 베이스 생성자로 this() 를 호출해야 함.
   #+begin_src csharp
     // // 컴파일 오류 남.
     // struct MyStruct
     // {
     //  public int Value { get; set; }
     //     public MyStruct(int value)
     //     {
     //      // 오류 : 값이 초기화 되기 전에 속성을 설정할 수 없습니다.
     //         Value = value;
     //     }
     // }
     
     // 기본 생성자를 명시적으로 호출함 --> OK
     struct MyStruct
     {
         public int Value { get; set; }
         public MyStruct(int value)
             : this ()
         {
             Value = value;
         }
     }
   #+end_src

* c++ 에서의 악명높은 catch(...) "땡땡땡 예외처리" 를 하려면...
   #+begin_src csharp
     try
     {
         // 먼가 한다.
     }
     catch
     {
         // 모든 예외를 다 받아낸다.
     }
   #+end_src
* AppDomain(Application Domain, App Domain) 이란.
   다음과 같은 걸 할 수 있는 프로세스내의 또 다른 경량 프로세스.
   - 프로그램의 안정성을 유지하면서 AppDomain을 shut down 가능
   - 프로세스내 낮은 권한을 가지는 격리된 코드를 로드할 수 있다(이를
     테면, 프로그램을 불안정하게 만들 수 있는 unmanaged code)
   - AppDomain 내에서 Unhandled Exception이 발생하더라도, 프로세스는
     크래쉬 되지 않게 할 수 있다.
   - 시스템 운영의 안정성을 위해서 별도의 프로세스를 사용하는 것 보다
     성능측면에서 훨씬 오버헤드가 적다.
   - 어셈블리를 UNLOAD 하기위해서는 별도의 AppDomain에 올리고
     AppDomain을 UNLOAD 하는 방법 말고는 없다. 웹 서비스 같은 것.
     반도체 공정장비 같은것. 
   - AppDomain 간에는 메소드 호출같은 걸 할 수 없다. 통신을 통해서
     하던지, 해야 한다. (InterProcess와 마찬가지).
   - 이런 장점이 있지만, 어쨌든 AppDomain 을 2개 이상 운영하는 것은
     단순하지만은 않은 작업일 수도 있단다.
   - AppDomain 의 primary thread들(Thread.Start() 에 의해 생성된
     쓰레드)이 모두 멈추기전에는 AppDomain 는 UNLOAD 되지 않는단다.
