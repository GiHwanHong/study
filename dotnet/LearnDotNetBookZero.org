#+TITLE:DotNetBookZero 정리
#+STARTUP:content
#+OPTIONS: ^:{}

* 1장 ~ 11장
** static readonly/const 그리고, c++에서의 local static 변수

   	정적 상수 멤버(static readonly)는 런타임에,
   	그냥 상수 변수(const)는 컴파일시에 설정된다.

   	#+begin_src csharp
      class MyClass
      {
          // strDelimter는 런타임에 세팅된다.
          static readonly strDelimiter = ",";
          // strDelimter2 는 컴파일 타임에 세팅된다.
          const strDelimiter2 = ",";
      }
   	#+end_src

   	위 두 가지는 실제로는 큰차이가 없다. 하지만 c++에서

   	#+begin_src c++
      class MyClass
      {
      public:
          void MyFunc()
          {
              static int callCounter = 0;
              ++callCounter;
          }
      };
   	#+end_src

   	하던 식으로 사용하던 *로컬정적변수는 C# 에서는 사용 불가*.

** void Do(ref int i) 와 void Do(out int i) 의 차이점

   - out 을 쓰면 인자를 넘겨줄때도 Do(out myValue) 이런식으로 해야
     한다.
   - ref로 넘겨줄 때는 *반드시 초기화가 되어 있어야 한다*.
   - out으로 넘겨줄 때는 *초기화 되어 있지 않아도 된다*.
	 
** void Do(ref {ValueType} var) 와 void Do({RefType} var) 

   - ValueType은 ref 로 명시해야만 pass-by-ref.
   - RefType은 원래 pass-by-ref. 단, 원래의 참조값 자체에 대한 참조를
     위해서는 ref 를 해야 함. 아래 예 참조
	 
	 #+begin_src csharp
       class MyClass
       {
           public static void AllocArray(int [] myArray)
           {
               myArray = new int [] { 1000, 2000, 3000 };
           }
           public static void AllocArrayRef(ref int [] myArray)
           {
               myArray = new int [] { 1000, 2000, 3000 };
           }
       }
	 #+end_src
	 
	 위 경우, AllocArray()로 넘겨진 myArray의 원래 참조는 바뀌지
     않는다. AllocArrayRef()의 경우에는 호출측의 myArray가 바뀐다.
     *C++에서의 Double Pointer개념*.

** Unified type system : 모든 것은 object 의 파생 클래스다.

   	int 나 double 같은 primitive type 까지 포함해서....

** .net 에서 라이브러리에 해당하는 "어셈블리"가  *.dll.

   	csc /target:library acme.cs    이런식으로 생성한다.
   	한편 /target:module 하면 생기는 건 모듈. 이건 나중에 어셈블리에
   	합칠 수 있다. 어셈블리=동적라이브러리, 모듈=정적라이브러리 라고
   	정리해 두자.

** C# 에서는 "클래스 정적 const 배열을 만들 수가 없다."

   	static readonly int [] myArray = { 0 , 1, 2 ,3 };

   	이렇게 선언했다고 하더라도, 결국

   	#myArray[0] = 19# 이런식으로 변경하는게 가능하기 때문이다.

   	이걸 막으려면, 외부에서 접근하는 방식을 막아야 한다. 

** 로컬에서 생성한 상수배열의 성능
   	상수배열은 new {Type} 하지 않고, 특정 함수내에 그냥 정의하는 것.

   	int [] myNumbers = { 0, 1, 2, 3, 4};

   	정적으로 선언/정의한 상수배열은 아래와 같이..

   	static [readonly] int [] myNumbers = { 0, 1, 2, 3, 4 }

   	정적 버젼이 단 1번만 초기화 되므로(아마 런타임시에), 훨씬 빠르지만,
   	상수배열을 로컬에 선언한다고 해서 그게 그리 큰 문제가 되지 는
   	않는다(최적화가 어느정도 이루어 진다?!)

* 12장. 예외처리
** 어떤 예외를 catch 할 건가.
   이를 테면, Console.ReadLine() 은 IOException,
   ArgumentOutOfRangeException, OutOfMemoryException 의 3가지 예외를
   뿜을 수 있는데,.... 극도로 부정적인 사람은 모든 ReadLine 호출시
   마다, try/catch 로 감싸고, 이 세가지 예외처리를 넣을 수 도 있겠다.
   하지만, 이 경우, 다른 2가지 예외와는 달리 OutOfMemoryException
   정도는 언제든지 발생할 수 있다는 생각 정도는 하고 코딩을 하는게
   유용할 거다.

** Double.TryParse 와 Double.Parse
   전자는 리턴값으로 오류발생을, 후자는 예외를 throw 하여 오류처리를
   해야 한다. 이런식으로 .net 에는 동일한 동작을 예외throw 유무가 있는
   버젼도 있다.

* 13장. Class ,Struct, 그리고 Object

   - struct는 value type, class 는 reference type. *struct는 자신으로
     부터 다른 타입을 파생시킬 수 없다*.

   - struct MyData {...} 는 ~MyData myData;~ 하면, 모든 멤버가
     uninit'ed 상태로 stack에 생성. 접근하는 코드가 보이면 컴파일
     오류. ~MyData myData = new MyData();~ 하면 *마찬가지로 stack에
     생성(new했어도)*. 하지만 이 경우, 모든 멤버가 zero로 초기화.

   - class MyData {...} 는 ~MyData myData;~ 하면, stack에 초기화 되지
     않은 reference 가 생김. 모든 멤버에 대한 접근 코드는 컴파일 오류.
     반드시 ~myData = new MyData();~ 한 다음 접근해야 컴파일 오류안남.
     new 하는 순간 모든 멤버가 0 으로 초기화된 상태로 heap에 생성. 한편
     ~MyData myData = null~ 로 null 초기화 하면, 컴파일 오류는 발생하지
     않으나(경고만 뜸), 프로그램 실행시 멤버 접근 코드는 exception을
     발생시킴.

   - 함수인자로 넘길때, struct건 class건 'ref' 를 인자type 앞에
     명시하지 않으면 무조건 pass-by-value. 하지만, reference type은
     reference value(즉, 주소값)이 value이므로 마치 reference가
     넘어가는 것 같은 느낌을 받게 될 뿐이다. reference가 가리키는
     주소의 내용은 바꿀 수 있지만, reference값 자체는 바꿀 수 없다.
     그럴려면, 'ref'를 명시해야 한다.

   - ~struct MyData {...}~ 인 경우, ~MyData [] myDataArray = new
     MyData[27]~ 은 27개의 sizeof(MyData) 영역이 Heap 에 할당되고,
     stack에는 그 heap영역을 가리키는 sizeof(pointer)크기 만큼이
     할당된다. 그리고, 그 heap 영역의 모든 값이 zero out된다(멤버의
     값이 0 이 된다).

   - ~class MyData {...}~ 인 경우, 위와 동일하게 배열을 할당하면,
     stack에는 동일한 sizeof(pointer) 크기 만큼이 할당되지만, heap에는
     27개의 sizeof(pointer) 공간이 할당되며, 각각의 pointer값은 null 
	 이 된다. 이를 제대로 할당하기 위해서는 27개의 모든 요소에 대해서
     ~myDataArray[i] = new MyData()~ 이런 식으로 new 해 주어야 하고,

* 14장. 인스턴스 메쏘드
* 15장. 생성자

   1. 생성자에는 2가지 종류가 있다. *Instance Constructor(인스턴스
      생성자)* 와 *Class Constructor(클래스 생성자)*. 아무말 없이
      사용하면 인스턴스 생성자라고 알아두면 될 듯. 아래 5~6 항목 참조

   2. struct의 소멸자는 /parameterless/ 할 수가 없다(/value type/
      자체가 배열등으로 만들어질 때 초기화시 속도를 빨리하게끔 하기
      위해 만든 제약사항이란다. 잘 이해는 안가지만). 17장에 나온
      힌트인데, *모든 값을 zero로 만드는 struct의 parameterless
      생성자로 인 zero가 아닌 값으로 초기화하는 방법은 속성을 개조하여
      원래값에 오프셋을 주도록 하는 방법이 있겠다*

   4. class 의 생성자는 /parameterless/ 할 수 있다.

   5. 생성자를 명시적으로 만들지 않으면, struct의 경우 모든 인자를
      /zero out/ 하는 생성자를 컴파일러가 만들어준다.

   6. class 의 /non parameterless/ 생성자를 1개라도 만들면, 컴파일러
      자동으로 생성해 주던 기본 /parameterless/ 생성자는 만들어지지
      않더라. (언어사양 $10.4.4 "If a class contains no instance
      constructor declarations, a default instance constructor is
      automatically provided." --> 이 말의 의미는 인스턴스 생성자가
      1개라도 있으면, 디폴트로 만들어지던 생성자는 자동으로 제공되지
      않는다가 된다.)

   7. struct 의 경우, class 와는 달리 /non-parametereless/ 생성자를
      만들었는지 여부와 상관없이 컴파일러가 항상 디폴트 parameterless
      생성자를 제공해 준다. 오히려 사용자가 정의한 /parameterless/
      생성자를 만들 수가 아예 없다.

   8. 인스턴스 생성자에서 인스턴스 메쏘드를 호출하는 경우에는 극도로
      주의를 해야 한다. 특정 필드의 값이 아직 정상적으로 설정되지
      않았을 수 있기 때문이다. 이런 이유때문에 인스턴스 생성자에서는
      가급적 클래스 메쏘드(정적 메쏘드)를 사용하도록 유도(?)하는 것
      같다. 이렇게 해서 *여러 생성자가 동일한 루틴을 공유하도록 하는
      것이 가능하다*

   9. 위 7번에서 정적 메쏘드를 사용하는 방법 말고 루틴공유 방법으로
      /Constructor Initializer/ 가 있다.

	  #+begin_src csharp
        public class Date
        {
            public Date(int year, int month, int day)
            {
                this.year = year;
                this.month = month;
                this.day = day;
            }
            public Date(int year)
                : this (year, 1, 1) // constructor initializer
            {
            }
        }
	  #+end_src

* 16장. 등가 개념(Concept of Equality)

   - struct 는 디폴트로 값비교를 bitwise equality을 하지만, RefType인
     class 는 레퍼런스가 같은지 비교한단다. (C에서 포인터 등가 비교를 생각).

   - =public virtual bool Equals(object obj)= 이런식으로 등가비교
     연산자를 재정의 할 수 있다. 하지만, 이 경우 GetHashCode() 를
     구현해야 한다.

   - operator=() 연산자는 public static 으로 클래스 메쏘드가 되어야 한단다.

   - 등가비교는 항상 조심해야 할 것 같은 느낌이다.

* 17장. 필드와 프로퍼티
** 접근가능자가 5개 = public + private + (protected + internal + internal protected)

   - 멤버변수를 정의할 때, public 을 타입 앞에 붙이지 않으면 디폴트가
     private 이다.

** readonly : 이건 오직 field에만 쓸 수 있다.

   - 어떤 멤버변수의 값을 외부에서 기록하지 못하게 하기 위해 c++
     에서는 해당 멤버를 protected/private으로 놓고, getter()를
     사용하였지만, C# 에서는 단순히 =public readonly int year;= 
	 이런 식으로 하면 된다.

   - struct가 아닌 class의 경우, readonly 변수의 초기값을 
	 =public readonly int year = 1=; 이런식으로 할 수 있다. 또는
     생성자를 통해서 단 1번만 설정하게 할 수 있다. 이렇게 하면
     immutable 객체가 된다.

** const : C++ 과는 달리 필드에만 쓸 수 있다(?)

	어떤 멤버를 const 로 선언하면 동시에 초기값을 설정하여야 하며,
	본질적으로 모든 const 멤버는 클래스 범위에서 접근해야
	한다(Math.PI)

** 프로퍼티를 정의할 때 사용하는 set/get 은 키워드가 아니다.

	단지 프로퍼티 정의시에만 독특한 의미로 사용된다. 다른 곳에서
	변수명으로 써도 된다.

** 프로퍼티 이름이 MyProp이면 Set_MyProp/Get_MyProp 은 사용불가

   컴파일러가 내부적으로 생성한 getter/setter 함수명과 충돌하기 때문에
   사용할 수가 없다.

** 프로퍼티 = private 변수선언 + get/set함수의 특별한 정의   

   *private으로 선언한 변수의 이름이 프로퍼티 이름과 동일하면 안된다*.

   #+begin_src csharp
     class Person
     {
         string name;
         public string Name {
             get {
                 return name;
             }
             set {
                 name = value;
             }
         }
     }
   #+end_src
  
** 프로퍼티는 반드시 값을 그대로 리턴할 필요가 없다.
	set과 get간의 관계만 명확하면 된다. ex: get()할때 -1 해서
	반환한다면, set할 때 +1 해서 저장해 두면 된다.. 이런식.

** 프로퍼티를 배열처럼 선언할 수 있다.

	#+begin_src csharp
      class DateClass {
          static string[] strMonths = new string[] {
              "January", "Feburary", "March", "April"
          };
          public static string[] MonthName {
              get {
                  return strMonths;
              }
          }
      }
      
      class ArrayProp {
          static void Main() {
              Console.WriteLine("DateClass.Month[2] = {0}", DateClass.MonthName[2]);
              foreach (string monthName in DateClass.MonthName) {
                  Console.WriteLine("{0}", monthName);
              }
          }
      }
	#+end_src

	위 결과는

	#+begin_example
          DateClass.Month[2] = March
          January
          Feburary
          March
          April
	#+end_example

** Indexer!!!

	- =public int this[int i];= 이런 멤버함수는 객체의 속성을 배열인덱스
	  처럼 접근할 수 있다.
	- =public int this[string str];= 이렇게 하면, dictionary 처럼
      접근이 가능하다.
	- 모든 indexer 는 속성과 마찬가지로 get/set 두 구간으로 나눌 수
      있다.
	- MSDN 문서에는 indexer 에 대해 이름 붙일때 "Items" 를 일반적으로
      쓰지만, String 클래스의 Indexer와 같이 "Chars" 라는 이름을
      사용하기도 한다. 실제로 C#은 내부적으로 "set_Item" 과 "get_Item"
      이라는 이름으로 된 접근함수를 만들어낸다(이 2개의 이름으로 된
      멤버는 만들 수 없다).
	
* 18장. 상속

   - 우선 C# 에는 protected/private 상속이 없다. 
	 =public Foo : private Bar { }= 이런식으로 할 수가 없다.

   - 파생클래스는 부모클래스의 생성자를 그대로 쓸 수 없다(C++과
     동일).인자 있는 생성자를 상속클래스에 따로 정의를 다시 해야
     한다(또 그렇게 하면 기본 /parameterless contstructor/ 는
     만들어지지 않는다.

   - 파생클래스에서 부모클래스의 생성자를 호출하려면 *base* 키워드를
     사용한다(15장에서 언급한 /constructor initializer/ 의 한 종류가
     된다. 그때는 this 를 썼지만 여기서는 base를 썼을 뿐). 생성자
     호출순서는 C++과 같이 부모클래스->자식클래스 이다.
	 
	 #+begin_src csharp
       class ExtendedDate: Date
       {
           public ExtendedDate()
           {
           }
           public ExtendedDate(int year, int month, int day)
               : base(year, month, day)
           {
           }
       }
	 #+end_src

   - 멤버 변수/메소드 에 대한 public/protected/private 은 C++과 비슷해
     보인다.

* 19장. 가상화(Virtuality)
** up/down cast문제와 C++의 dynamic_cast같은 'as' 연산자

   C++에서의 down casting 및 up casting 개념이 C# 에도 있다. up
   casting은 문제 없다.

   #+begin_src csharp
   ExtendedDate exDate = new ExtendedDate();
   object obj = exDate;
   #+end_src

   근데, down casting은 역시나 문제가 있다. 명시적 형변환이 필요.
   c++에서의 dynamic_cast<> 같은 개념이 필요할 수 있다(즉, 실제로 그
   객체가 그 형인지 알려면...

   #+begin_src csharp
     // 안전하지 않은 방식(obj 가 실제로 ExtendedDate 가 아니면
     // InvalidCastException이 발생한다)
     ExtendedDate exDate = (ExtendedDate)obj;
     // 안전(?)한 방식
     ExtendedDate exDate = obj as ExtendedDate;
     if (exDate)
     {
         // obj 가 ExtendedDate 였다.
     }
     else
     {
         // obj 가 ExtendedDate 가 아니였다.
     }
   #+end_src

** Object의 GetType() 또는 typeof() 연산자로 얻은 Type 객체.

   어떤 객체의 타입에 대한 정말 많은 정보를 얻을 수 있다. 이를 테면.

   #+begin_src csharp
     object obj = new Date;
     Type objType = obj.GetType(); // 또는 typeof(Date)
     Console.WriteLine("obj type name : {0}", objType);
     foreach (MemberInfo mi in objType.GetMembers())
     {
         Console.WriteLine("member : {0}", mi);
     }
   #+end_src

   그리고, Type 객체는 형이 정의되면 생기는 형 별로 딱 1개 생기는
   전역객체를 가리키는 레퍼런스(포인터)이다. 따라서, 등가비교를 하는
   것이 가능하다.

   #+begin_src csharp
   obj.GetType() == typeof(ExtendedDate)
   #+end_src

** 'is' 연산자

	인스턴스 메소드인 GetType() 이나 C# 연산자인 typeof() 를 사용하지
	않고 어떤 객체가 특정형인지 알 수 있게 해주는 것이 'is' 연산자.
	GetType() 은 인스턴스 메소드 이므로 객체가 null인 경우 예외가
	발생하지만, is 연산자는 그런일이 없다. 그냥 false 로 평가된다. 

	#+begin_src csharp
      if (obj is Date)
      {
          Console.WriteLine("object is Date type!");
      }
	#+end_src

** 오버라이드 가능한 멤버 = virtual 메소드 , virtual 속성

	부모 클래스에서

	public virtual string ToString();

	하고, 자식 클래스에서

	public override string ToString();

	하는 식.

** 부모클래스의 메소드를 명시적으로 hiding하는 'new' 키워드(생성할때의 new와 다른것)

	부모가

	public void NonVirtualMethod();

	했는데, 자식이

	public void NonVirtualMethod();

	하면 컴파일러가 경고를 띄운다. 무심코 부모클래스의 기능 하나가
	hiding되기 때문이다. 이런 경우 의도한 바라면,
	자식 클래스에서

	public new void NonVirtualMethod();

	하면 경고가 사라지며, 명시적으로 부모 클래스의 메소드를 막는다.

	NonVirtualMethod() 는 부모클래스형으로 호출하는 경우와
	자식클래스형으로 호출하는 경우가 구분된다. (virtual 함수는 그렇지
	않다. 항상 실제 형의 루틴이 호출된다. C++과 동일하다. --> "다형성")

** abstract class , abstract method

	abstract class Musician {}

	으로 정의한 클래스의 객체는 못만듬.

	public abstract  decimal CalculatePay();

	함수는 반드시 override 되어야 하는 메소드.

** struct 형 객체를 object 형으로 형변환 : boxing / unboxing

	- *struct 는 스택에 생성되는 값 객체이므로, 서로 다른 형 끼리는
      대입하지 못한다*.

	- *struct 형* 을 선언하면 스택에 해당형의 크기만큼이 할당된다. 근데,
      struct 역시 object로 부터 파생된 형이므로, *object에 대입이
      가능* 하다.

	- object형으로 대입될 때 힙에 struct형을 담을 수 있는 공간이
      확보되어 거기에 해당 struct의 모든 멤버의 값이 복사된다. 이를
      *Boxing* 이라고 한다. --> 퍼포먼스에 영향을 줄 수 있음.

	- object가 가리키는 struct의 내용을 역참조할때는 *Unboxing* 을
      하게 된다. 이 경우도 복사가 일어난다. --> 퍼포먼스!!!

	- 가급적 boxing/unboxing이 일어나지 않도록 구체적인 struct형을
      주고 받는 식으로 메소드들을 오버라이딩 하는 게 바람직.(ex: WriteLine)
	
* 20장. 연산자 재정의(Operator Overloading)

   먼저 말해 두지만, struct는 값을 위한 타입이고 파생클래스를 만들 수
   없다. 자신이 가지는 연산자도 당연, 파생될 수가 없고, 이것은 말이
   된다. 사실 class의 오퍼레이터도 자신의 파생클래스에는 문제가 될
   소지가 있다(파생클래스에서 Add 같은 연산자가 리턴하는 값의 타입은
   파생클래스가 될까? Add연산자를 매번 새로 정의하지 않으면
   부모클래스의 객체가 반환될 거다!!!)

   숫자들로 구성된 데이터를 다루고, 그것에 대한 연산자를 오버로딩하는
   것은 struct 형을 통해서 하는 것이 바람직하다.(바로 위에 문장에
   의하면,  struct가 파생될 수 없는 점이 이 경우에는 강점이 된다).

** 계산을 위한 연산자 재정의
   
   - 연산자 재정의는 무조건 static 으로 해야 한다. 또한 빼기 연산자를
객체에 대해 수행하지 못하는 프로그래밍 언어를 위해 명시적인 Add,
Subtract, Multiply, Divide 같은 이름을 사용한 함수를 만들어야 할 필요도
있게 된다. 결국 아래와 같은 식으로 구현.

   #+begin_src csharp
     public static int operator - (Date lhs, Date rhs)
     {
         return Subtract(lhs, rhs);
     }
     public static int Subtract(Date lhs, Date rhs)
     {
         int daysDifference = lhs.value - rhs.value;
         return daysDifference;
     }
     public static Date operator + (Date lhs, int days)
     {
         return Add (lhs, rhs);
     }
     public static Date Add (Date lhs, int days)
     {
         Date v = new Date;
         v.value = lhs.value + days;
         return v;
     }
   #+end_src

   - 연산자 재정의 시 2개 인자의 순서도 중요하다(연산잔 교환법칙이
     성립되지 않는 경우를 고려).

** 등가 연산자 재정의

   - 등가 연산자(Equals 또는 operator ==) 의 구현시, Object 루트
     클래스는 Object형 2개를 인자로 받는 static 메소드이므로, struct와
     같이 ValueType 형의 객체는 boxing/unboxing이 발생한다. 명시적인
     형을 받는 Equals 를 구현해 놓는게 좋다.

   - 등가연산자 구현시 Equals 및 GetHashCode 메소드를 override해야
     한다. GetHasCode는 32비트 정수형을 반환하는데, 값에 따라 2의 32승
     가짓수를 넘어서는 값의 종류가 있다면 유일성은 포기해야 한다.

   - 타입변환 연산자도 재정의가 된다. 다만, 사이드 이펙트로 변환되는
     것을 막기 위해 explicit 키워드를 사용해 주는게 좋다. 
	 
	 public static explicit operator int (SuperDate sd);
	 
	 위의 역 변환도 가능하게 할 수 있다. 
	 
	 public static explicit operator SuperDate(int value);
	 
** partial 키워드	 

	partial class SuperDate : ExtendedDate {}

	처럼 하면, SuperDate 의 구현을 2개 이상의 파일에서 할 수 있단다.

	partial은 

** 책에 나온 Date class 보다는 CommonEraDay 정수값 1개를 가지는 Date struct

	펫졸드 아저씨는 설명을 위해서 Date를 class로 만들었지만, 실제로
	본인도 이것 보다는 값 형식인 struct를 사용하고 내부의 값은
	심플하게 정수형 1개로 표현할 수 있는 Date struct가 훨씬 낫단다.

* 21장. 인터페이스(Interfaces)

   - interface 는 메소드의 구현이 전혀 없다(C++ 순수가상클래스와
     비슷).
   - class 는 다른 class 1개로 부터만 상속받을 수 있으나, interface를
     상속받는 경우는 여러개 상속이 가능하다.
   
	 ex : class SuperDate : ExtendedDate, IComparable

   - IComparable 을 사용하되 partial 키워드를 사용해 원본 클래스
     소스코드를 전혀 손대지 않고, 구현이 가능했다.

   #+begin_src csharp
     partial class Person : IComparable
     {
         public int CompareTo(Object obj)
         {
             // 여기에 구현을 넣는다.
         }
     }
   #+end_src

   *interface 에 선언된 메소드를 정의할 때는 override 키워드를 쓰면
   안된다.* C++을 생각하면 당연히 virtual일거라 생각했는데, 아니네..

   *Array.Sort()* 클래스 정적 메소드는 keyList와 valueList 두개를 모두
    받는 버젼이 있더라. (key가 정렬되는 순서대로 valueList도 함께
    정렬되더라. 굳이 자료구조를 구성해서 정렬할 필요가 없어 조으네).

* 22장. 상호운용성(Interoperability)

   P/Invoke 를 통해 Win32 DLL을 호출하는 방법에 대해 설명.

* 23장. Date와 Time

   일단 스킵

* 24장 Event와 Delegate

   - A 에 무슨일 이 생길때 그 사실을 B에 알려주는 방법 : Polling &
     Event 의 2가지방법. Event가 더 좋다는 얘기...
   - =public delegate void EventHandler(Object sender, EventArgs e);=
     이런식으로 EventHandler 라는 이름의 delegate를 정의했다...함은
     void(Object,EventArags) 시그너쳐를 가지는 함수포인터같은 개념을
     정의했다는 의미

   - 이벤트를 정의하려면...
	 
	 #+begin_src csharp
       public event EventHandler InformationAlert;
	 #+end_src

     EventHandler 라는 시그너쳐를 가지는 InformationAlert 라는
     이벤트를 클래스 정의에 추가함.

   - Event처리기의 등록과 호출
	 
	 #+begin_src csharp
       // B 쪽 생성자 등에서 핸들러와 이벤트를 연계할때 2가지 방법이 모두 가능
       // .NET 2.0 이하에서 
       a.InformationAlert += new EventHandler(MyInformationAlertHandler);
       // 또는 .NET 2.0 이상에서 가능구문을 사용.
       a.InformationAlert += MyInformationAlertHandler;
       
       // B 클래스의 메소드
       void MyInformationAlertHandler(object sender, EventArgs e)
       {
           // 여기서 실제 이벤트 처리루틴
       }
       
       // A 클래스에서는
       {
           // 이벤트를 날려야 되는 순간이 되었다!! (fire or raise Event!)
       
           if (InformationAlert != null)
           {
               // 이벤트 헨들러가 등록된게 있다. 통지 하자.
               InformationAlert(this, new EventArgs(...));
           }
       }
	 #+end_src
	 
	 등록 시의 구문이 += 연산자를 써서 여러개의 핸들러를 등록시킬 수
     있기 때문에, InformationAlert.Length 같은 식으로 확인해야 할 것
     같은데, null 로 확인하는 점이 헛갈린다.
	 
	 등록 해제 하려면 -= 연산자를 써서 할 수 있다.
	 
	 #+begin_src csharp
	 a.InformationAlert -= new EventHandler(MyInformationAlertHandler);
	 #+end_src
	 
	 .NET 2.0의 깔끔한 핸들러 등록 구문을 써서 예제 하나. 이벤트
     핸들러 메소드를 마치 변수 다루듯이 한 점을 유심히!
	 
	 아래 코드는 
	 
	 1. 객체의 멤버함수를 핸들러로 등록("객체.메소드" 구문
	 2. 익명 메소드를 핸들러로 등록("delegate" 구문) - Full/Short version!
	 3. 정적 메소드를 핸들러로 등록("public static 함수")
	 
	 의 3가지 종류에 대한 핸들러 등록을 하고 있다. 등록 순서대로
     이벤트 발생시 호출이 일어난다. 
	 
	 *익명메소드를 사용하기는 우아하지만, 로컬변수와 관련하여서는 좀
     tricky 할 수 있다.*

	 #+begin_src csharp
       using System;
       using System.Timers;
       class TimerHandlingClass {
           public void OnElapsed(Object sender, ElapsedEventArgs e) {
               Console.WriteLine("object handled event(data={0}) handled event!", data);
           }
           public int data;
       }
       class TimerEventTest {
           static void Main() {
               TimerHandlingClass thc = new TimerHandlingClass();
               thc.data = 18; // 객체가 그 객체가 맞는지 확인.
               Timer timer = new Timer();
               timer.Interval = 500;
       
               // 객체의 멤버함수
               timer.Elapsed += thc.OnElapsed;
               // 익명 메소드(anonymous method) - full version
               timer.Elapsed += delegate (Object sender, ElapsedEventArgs e) {
                   Console.WriteLine("Lambda delegator handled event!!!");
               };
               // 익명 메소드 - short version
               timer.Elapsed += delegate {
                   Console.WriteLine("Simple Lambda delegator handled event!!!");
               };
               // 정적함수
               timer.Elapsed += TesterHandler;
       
               timer.Start();
               Console.ReadLine();
           }
           public static void TesterHandler(Object sender, ElapsedEventArgs e) {
               Console.WriteLine("TesterHandler handled event!!!");
           }
       }
	 #+end_src

* 25장. 파일과 스트림

   - System.IO 네임스페이스관련 내용. XML파일 IO는 System.XML 을 쓰라.
**  Stream(추상클래스)

BufferedStream, FileStream, MemoryStream, NetworkStream 의 4가지
종류파생클래스가 있다. Stream자체는 다음의 메소드를 가짐

   - CanRead, ReadByte(1바이트읽음), Read(여러바이트읽음)
   - CanWrite, WriteByte(1바이트기록), Write(여러바이트쓰기)
   - CanSeek, Length, Position, Seek(SeekOrigin enum을 사용:Begin/Current/End)
   - CanTimeout, ReadTimeout, WriteTimeout

비동기 동작을 위한 메소드도 존재	 

   - BeginRead
   - EndRead
   - BeginWrite
   - EndWrite

** FileStream

대다수의 파일 관련 동작은 이걸 쓰면 된다. 하지만, C/C++ 처럼 바이너리
버퍼를 특정 struct 형으로 바꿀 수 있는 언어들과는 달리, C# 은 그런일을
할 수 없으므로, 순수(!)하게 바이너리를 읽는 작업 이외에 이 클래스를
사용하게 되는 일은 드물다(*Text File I/O* 혹은 *Binary File I/O* 를
쎄게 된다)

  - 생성자 : 시그너쳐의 종류가 많음. 일반적으로 2개의 인자(FileName과
    FileMode)와 2개의 선택인자(FileAccess=디폴트는
    FileAccess.ReadWrite, FileShare=디폴트는 FileShare.None 이라지만,
    MSDN을 보면 어떤 생성자는 FileShare.Read가 디폴트인 경우도 있음)

  - 생성자를 사용해 초기화하기 때문에 동작실패시 예외가 던져지는
    식으로 처리 --> *항상 try/catch 블럭에 감싸서 호출할 것!*

  - FileMode가 FileMode.Append 인데, 선택인자에 Read가 들어가면
    FileStream의 생성은 무조건 실패. 다음과 같이 함.
	
	=new FileStream(fileName, FileMode.Append, FileAccess.Write)=
	
  - ReadByte는 1 바이트를 읽기는 하지만 int 형으로 형변환된 값을
    반환한다. 0xFF 를 읽으면 0x000000FF 즉 255 가 반환된다. 읽기
    실패(파일의 끝을 지나치는 경우)에는 -1 이 반환된다.	

** Text File I/O = TextReader(/abstract/) + TextWriter(/abstract/)

	- TextReader = *StreamReader* + StringReader
	- TextWriter = *StreamWriter* + StringWriter
   
   StreamReader/Writer 는 Encoding을 인자로 받기 때문에 Encoding 에
   관한 얘기가 주욱 나온다.

   - UTF8 이 중요할 것 같은데, BOM을 쓰지 않는 경우라면,
     Encoding.Default 를 쓰라는 얘기가 있다.(또는 UTFEncoding(true))
   - 윈도우즈 안시 캐릭터 셋을 쓰려면
     *Encoding.GetEncoding({코드페이지})* 를 쓰란다.
   - MSDN 을 찾아보니 *Encoding.GetEncoding()* 클래스 매소드는 문자열을
     받는 버젼도 있다. 아래와 같은 방식으로 사용
	 
	 #+begin_src csharp
       public class SamplesEncoding
       {
           public static void Main()
           {
               // Get a UTF-32 encoding by codepage.
               Encoding e1 = Encoding.GetEncoding( 65005 );
       
               // Get a UTF-32 encoding by name.
               Encoding e2 = Encoding.GetEncoding( "utf-32" );
       
               // Check their equality.
               Console.WriteLine( "e1 equals e2? {0}", e1.Equals( e2 ) );
           }
       }
       // "e1 euqlas e2? True" 라고 찍힌다.
	 #+end_src
	 
	 또 *Encoding.GetEncodings()* 클래스 매소드는 사용가능한 모든
     EncodingInfo 객체들의 목록을 반환한다.

** StreamWriter

   - BaseStream 속성 : 자신의 기반이 되는(또는 생성시 사용된) Stream
   - Encoding 속성 : 설정된 인코딩
   - AutoFlush 속성 : 버퍼링사용 여부
   - NewLine 속성 : =\r\n= ?
	 
   - Write 메소드
   - WriteLine 메소드
   - Flush 메소드
   - Close 메소드

   - StreamWriter() 생성자중 *bool detect* 인자를 true 로 하면, 처음
     몇바이트를 가지고 인코딩을 디텍팅해낸다!!!! 거기다가 Encoding을
     명시적으로 알려주면, 혹 디텍팅을 못한 경우에 지정된 Encoding을
     알려준다.

** StreamReader

	- BaseStream 속성
	- CurrentEncoding 속성 : *읽기를 시작하면서 바뀔 수 있다*
	- Peek 메소드 : 읽기위치를 옮기지 않고 1바이트 얻음. --> -1 에러
	- Read 메소드 : 읽기위치가 옮겨지고    1바이트 얻음. --> -1 에러
	- *ReadLine* 메소드 : 파일끝에 가면 null 객체 반환.
	- *ReadToEnd* 메소드 : 전체 파일 읽기.
   
** Binary File I/O = BinaryReader + BinaryWriter

	- 모두 Object 에서 바로 상속(cf. StreamReader/Writer는 Object >
      MarshalByRefObject > StreamReader/Writer).
	- 생성자에서 Stream 을 받고, 나중에 BaseStream 속성으로 다시 얻을
      수 있음.

** BinaryWriter

	- Write 메소드 : bool, byte, byte[], char, char[], string, short,
      int, float, ... 18개 형에 대한 오버로딩이 존재!!! --> 타입에
      대한 정보는 기록하지 않고, 단순히 데이터값만 기록한다.
	  배열의 경우, *배열의 길이정보 역시 기록하지 않는다*.
	  문자열의 경우, *7비트 인코딩된 정수값으로 길이가 기록된다?*

	- Seek 메소드
	- Flush 메소드
	- Close 메소드 : underlying Stream을 Close 한다.
   
** BinaryReader

	- ReadBoolean, ReadByte, ReadBytes, ReadSByte, ... 이런식으로 값을
      반환하는 읽기 메소드가 존재한다.-> EOF 에 다다르면, EndOfStream
      예외가 발생한다(반환값 자체가 데이터이므로 반환값으로 호출
      성공여부를 알 수 없겠다) --> Reader의 경우 오퍼레이션을
      try/catch 로 감싸야 한다.
	- PeekChar 메소드 : 다음에 오는 1 바이트를 읽고 위치 변경 X
	- Read 메소드     : 다음에 오는 1 바이트를 읽고 위치 변경 O
